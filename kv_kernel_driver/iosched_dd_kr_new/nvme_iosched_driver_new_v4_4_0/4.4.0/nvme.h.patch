--- nvme.h	2019-10-21 15:57:56.155461000 -0700
+++ nvme.h.patched	2019-10-21 13:31:52.954046000 -0700
@@ -1,6 +1,10 @@
 /*
  * Copyright (c) 2011-2014, Intel Corporation.
  *
+ * Modified by Heekwon Park from Samsung Electronics.
+ * See KV_NVME_SUPPORT to check modification.
+ * E-mail : heekwon.p@samsung.com
+ *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms and conditions of the GNU General Public License,
  * version 2, as published by the Free Software Foundation.
@@ -14,10 +18,56 @@
 #ifndef _NVME_H
 #define _NVME_H
 
+#ifndef KV_NVME_SUPPORT
+#define KV_NVME_SUPPORT
+#endif
+//#define INSDB_DEBUG
+#if 0
+#define KV_NVME_TRACE
+#endif
+#if 0
+#define REPORT_TIMEOUT
+#endif
+#if 0
+/*KV code tracer*/
+#define KV_NVME_CT
+#endif
+#define NR_KV_SSD 16
+
+
+
+#ifdef KV_NVME_SUPPORT
+#include "linux_nvme.h"
+#else
 #include <linux/nvme.h>
+#endif
+
 #include <linux/pci.h>
 #include <linux/kref.h>
 #include <linux/blk-mq.h>
+#include "kv_iosched.h"
+
+#ifdef KV_NVME_SUPPORT
+#define is_kv_append_cmd(opcode)	((opcode) == nvme_cmd_kv_append)
+#define is_kv_store_cmd(opcode)	((opcode) == nvme_cmd_kv_store)
+#define is_kv_retrieve_cmd(opcode)	((opcode) == nvme_cmd_kv_retrieve)
+#define is_kv_delete_cmd(opcode)	((opcode) == nvme_cmd_kv_delete)
+#define is_kv_iter_req_cmd(opcode)	((opcode) == nvme_cmd_kv_iter_req)
+#define is_kv_iter_read_cmd(opcode)	((opcode) == nvme_cmd_kv_iter_read)
+#define is_kv_exist_cmd(opcode)	((opcode) == nvme_cmd_kv_exist)
+//#define is_kv_iterate_cmd(opcode)	((opcode) == nvme_cmd_kv_iterate)
+#define is_kv_io_cmd(opcode)	(is_kv_store_cmd(opcode) ||\
+		is_kv_retrieve_cmd(opcode) || is_kv_delete_cmd(opcode) ||\
+        is_kv_append_cmd(opcode))
+//#define is_kv_special_cmd(opcode)	(is_kv_exist_cmd(opcode) || is_kv_iterate_cmd(opcode))
+#define is_kv_special_cmd(opcode)	(is_kv_iter_req_cmd(opcode) ||\
+        is_kv_iter_read_cmd(opcode) || is_kv_exist_cmd(opcode))
+#define is_kv_cmd(opcode)	(is_kv_store_cmd(opcode) ||\
+		is_kv_retrieve_cmd(opcode) || is_kv_delete_cmd(opcode) ||\
+        is_kv_iter_req_cmd(opcode) || is_kv_iter_read_cmd(opcode) ||\
+		is_kv_exist_cmd(opcode))
+//		is_kv_exist_cmd(opcode) || is_kv_iterate_cmd(opcode))
+#endif
 
 enum {
 	/*
@@ -155,6 +205,12 @@
 
 	u64 mode_select_num_blocks;
 	u32 mode_select_block_len;
+#ifdef KV_NVME_SUPPORT
+	/*
+	 * per namespace data structure for writeback & read-ahead 
+	 */
+	struct kv_iosched_struct *kv_iosched;
+#endif
 };
 
 struct nvme_ctrl_ops {
@@ -335,6 +391,54 @@
 }
 #endif /* CONFIG_NVM */
 
+#ifdef KV_NVME_SUPPORT
+/*
+ * The stuct nvme_dev is relocated from pci.c
+ */
+struct nvme_dev {
+	struct nvme_queue **queues;
+	struct blk_mq_tag_set tagset;
+	struct blk_mq_tag_set admin_tagset;
+	u32 __iomem *dbs;
+	struct device *dev;
+	struct dma_pool *prp_page_pool;
+	struct dma_pool *prp_small_pool;
+	unsigned queue_count;
+	unsigned online_queues;
+	unsigned max_qid;
+	int q_depth;
+	u32 db_stride;
+	struct msix_entry *entry;
+	void __iomem *bar;
+	struct work_struct reset_work;
+	struct work_struct scan_work;
+	struct work_struct remove_work;
+	struct work_struct async_work;
+	struct timer_list watchdog_timer;
+	struct mutex shutdown_lock;
+	bool subsystem;
+	void __iomem *cmb;
+	dma_addr_t cmb_dma_addr;
+	u64 cmb_size;
+	u32 cmbsz;
+	unsigned long flags;
+
+#define NVME_CTRL_RESETTING    0
+#define NVME_CTRL_REMOVING     1
+
+	struct nvme_ctrl ctrl;
+	struct completion ioq_wait;
+#ifdef CONFIG_NVME_VENDOR_EXT_GOOGLE
+	u32 *db_mem;
+	dma_addr_t doorbell;
+	u32 *ei_mem;
+	dma_addr_t eventidx;
+#endif
+};
+
+#endif
+
+
 int __init nvme_core_init(void);
 void nvme_core_exit(void);
 
